install.packages('rgdal')
install.packages('rgdal', type='source')
library(rgdal)
library(swiMap)
?getShpLayers
require(rgdal)#
require(rgeos)#
require(ggplot2)#
path <- getPathShp('world')#
layers <- getShpLayers(path)#
# read shapefiles for given layer#
world <- readOGR(path, layer = layers[1])#
world.df <- formatShp(world)#
# plot world map#
ggplot(world.df, aes(x = long, y = lat, group = group)) + geom_polygon(size = 0.01, aes(fill = FIPS)) +#
theme_minimal() + theme(legend.position = "none", panel.grid = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), axis.text = element_blank())#
Same with swiss commune map (slow!)#
## Not run: #
path.ch <- getPathShp('CH')#
ch <- readOGR(path.ch, layer = 'municipalities')#
ch.df <- formatShp(ch)#
# plot swiss commune map#
ch.communes <- ggplot(ch.df, aes(x = long, y = lat, group = group)) + geom_polygon(size = 0.01, aes(fill = GEMNAME)) +#
theme_minimal() + theme(legend.position = "none", panel.grid = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), axis.text = element_blank())#
ch.communes#
# add the lake and country contours#
lake.df <- formatShp(readOGR(path.ch, layer = "lakes"))
ogrListLayers(file.path(path.ch, "ch-country.ch"))
ogrListLayers(file.path(path.ch, "ch-country.json"))
country.layers <- ogrListLayers(file.path(path.ch, "ch-country.json"))
country.layers
country.df <- readOGR(file.path(path.ch, "ch-country.json"), "country")
country.layers <- ogrListLayers(file.path(path.ch, "ch-country.json"))
country.df <- formatShp(readOGR(file.path(path.ch, "ch-country.json"), country.layers[1]))
country.df <- readOGR(file.path(path.ch, "ch-country.json"), country.layers[1])
ch.communes + geom_polygon(data = country.df, fill = NA, color = "black", size = 2) + geom_polygon(data = lake.df, fill = "lightgrey", colour = "lightgrey")
country.df <- formatShp(readOGR(file.path(path.ch, "ch-country.json"), country.layers[1]))
country.df <- readOGR(file.path(path.ch, "ch-country.json"), country.layers[1])
str(country.df)
country.df <- fortify(readOGR(file.path(path.ch, "ch-country.json"), country.layers[1]))
ch.communes + geom_polygon(data = country.df, fill = NA, color = "black", size = 2) + geom_polygon(data = lake.df, fill = "lightgrey", colour = "lightgrey")
ch.communes + geom_polygon(data = country.df, fill = NA, color = "black", size = 0.1) + geom_polygon(data = lake.df, fill = "lightgrey", colour = "lightgrey")
country.layers
ch.communes + geom_polygon(data = lake.df, fill = "lightgrey", colour = "lightgrey")
ch.communes + geom_polygon(data = country.df, fill = NA, color = "black", size = 0.1) + geom_polygon(data = lake.df, fill = "lightgrey", colour = "lightgrey")
library(swiMap)
?getPathShp
require(rgdal)#
require(rgeos)#
require(ggplot2)
path.ch <- getPathShp('CH')#
ch <- readOGR(path.ch, layer = 'municipalities-without-lakes')#
ch.df <- formatShp(ch)#
# plot swiss commune map#
ch.communes <- ggplot(ch.df, aes(x = long, y = lat, group = group)) + geom_polygon(size = 0.01, aes(fill = GEMNAME)) +#
theme_minimal() + theme(legend.position = "none", panel.grid = element_blank(), axis.ticks = element_blank(), axis.title = element_blank(), axis.text = element_blank())#
ch.communes#
# add the lake and country contours#
lake.df <- formatShp(readOGR(path.ch, layer = "lakes"))#
country.layers <- ogrListLayers(file.path(path.ch, "ch-country.json"))#
country.df <- fortify(readOGR(file.path(path.ch, "ch-country.json"), country.layers[1]))
h.communes + geom_polygon(data = country.df, fill = NA, color = "black", size = 0.1)
ch.communes + geom_polygon(data = country.df, fill = NA, color = "black", size = 0.1)
ogrListLayers(path.ch)
library(swiMap)
system.file("extdata", package="swiMap")
dir(system.file("extdata", package="swiMap"))
dir(system.file("extdata", package="swiMap"), "GDEHist_GDE\\.txt")
?dir
dir(system.file("extdata", package="swiMap"), "GDEHist_GDE\\.txt", full.names = T)
data.path <- dir(system.file("extdata", package="swiMap"), "GDEHist_GDE\\.txt", full.names = T)#
  read.csv(data.path, sep ="\t")
?read.csv
data <- read.csv(data.path, sep ="\t",  header = FALSE)
str(data)
data.path <- dir(system.file("extdata", package="swiMap"), "GDEHist_GDE\\.txt", full.names = T)#
  data <- read.csv(data.path, sep ="\t",  header = FALSE, stringsAsFactors = F)
str(data)
head(data)
colnames(data) <- c('GHSTNR', 'BHSTNR', 'KTKZ', 'GBFSNR', 'GNAME', 'GNAMK', 'GARTE', #
                      'GSTAT', 'GINIMUT', 'GINIART', 'GINIDAT', 'GFINMUT', 'GFINART', #
                      'GFINDAT','GMUTDAT')
str(data)
asDate(data$GINIDAT)
as.Date(data$GINIDAT)
as.date
?as.Date
as.Date(data$GINIDAT, format = "%d.%m.%Y")
str(data)
as.Date(data$GINIDAT, format = "%d.%m.%Y")
data$GINIDAT <- as.Date(data$GINIDAT, format = "%d.%m.%Y")#
  data$GFINDAT <- as.Date(data$GFINDAT, format = "%d.%m.%Y")#
  data$GMUTDAT <- as.Date(data$GMUTDAT, format = "%d.%m.%Y")
str(data)
min(data$GINIDAT)
str(min(data$GINIDAT))
as.Date("1960-01-01")
today()
date()
?date()
Sys.Date()
"2012-01-01"
Sys.Date()
start <- as.Date(start)#
  end <- as.Date(end)
start
start<- "2012-01-01"
end <- Sys.Date()
start <- as.Date(start)#
  end <- as.Date(end)
start
end
str(data)
data$GFINDAT
data$GFINDAT >= start
which(data$GFINDAT >= start)
data[which(data$GFINDAT >= start),]
?encoding
?Encoding
data.path <- dir(system.file("extdata", package="swiMap"), "GDEHist_GDE\\.txt", full.names = T)#
  data <- read.csv(data.path, sep ="\t",  header = FALSE, stringsAsFactors = F, encoding = "latin1")#
  # colnames#
  colnames(data) <- c('GHSTNR', 'BHSTNR', 'KTKZ', 'GBFSNR', 'GNAME', 'GNAMK', 'GARTE', #
                      'GSTAT', 'GINIMUT', 'GINIART', 'GINIDAT', 'GFINMUT', 'GFINART', #
                      'GFINDAT','GMUTDAT')#
  # tranform to dates#
  data$GINIDAT <- as.Date(data$GINIDAT, format = "%d.%m.%Y")#
  data$GFINDAT <- as.Date(data$GFINDAT, format = "%d.%m.%Y")#
  data$GMUTDAT <- as.Date(data$GMUTDAT, format = "%d.%m.%Y")
data[which(data$GFINDAT >= start),]
data[which(data$GFINDAT >= start & data$GINIART == 24),]
data[which(data$GFINDAT >= start & data$GINIART == 26),]
data[which(data$GFINDAT >= start || data$GINIDAT >= start),]
data[which(data$GFINDAT >= start | data$GINIDAT >= start),]
data[which(data$GFINDAT >= start & data$GINIART == 26),]
start
data[which(data$GFINDAT >= start & data$GINIART == 26),'GFINMUT']
data$GFINMUT %in% data[which(data$GFINDAT >= start & data$GINIART == 26),'GINITMUT']
which(data$GFINMUT %in% data[which(data$GFINDAT >= start & data$GINIART == 26),'GINITMUT'])
data[which(data$GFINDAT >= start & data$GINIART == 26),'GFINMUT']
data[which(data$GFINDAT >= start & data$GINIART == 26),]
data[which(data$GFINDAT >= start & data$GINIART == 24),]
which(data$GINIMUT == 3404)
data[which(data$GINIMUT == 3404),]
data[which(data$GFINDAT >= start | data$GINIDAT >= start),]
data[which((data$GFINDAT >= start | data$GINIART >= start) & (data$GFINDAT <= end | data$GINIART <= end)),]
data[which((data$GFINDAT >= start | data$GINIART >= start),]
data[which(data$GFINDAT >= start | data$GINIART >= start),]
data[which(data$GINIMUT == 3404),]
data[which(data$GFINDAT >= start | data$GINIART >= start),]
test<- data[which(data$GFINDAT >= start | data$GINIART >= start),]
data[which(data$GFINDAT >= start | data$GINIART >= start),]
data[which(data$GINIMUT == 3404),]
test
data[which(data$GINIMUT == 3404),]
any(test$GINIMUT == 3404)
summary(data$GFINDAT)
T | NA
NA | T
data[which((data$GFINDAT >= start | data$GINIDAT >= start) & (data$GFINDAT <= end | data$GINIDAT <= end)),]
library(swiTheme)
?multiplot
q1 <- qplot(1:10, 1:10, size = 10:1) + xlab("axis x label") + ylab ("y axis label") + theme_swi2()#
q2 <- qplot(mpg, data = mtcars, geom = "dotplot") + theme_swi()#
multiplot(list(q1, q2))
library(leaflet)
(m <- leaflet() %>% addTiles())
m %>% setView(lng = -1.5, lat = 53.4, zoom = 10) # set centre and extent of map
(m2 <- m %>%#
  setView(-1.5, 53.4, 10) %>% # map location#
  addMarkers(-1.4, 53.5) %>% # add a marker#
  addPopups(-1.6, 53.3, popup = "Hello Sheffield!") %>% # popup#
  # add som circles:#
  addCircles(color = "black", runif(90, -2, -1), runif(90, 53, 54), runif(90, 10, 500)))
library(leaflet)#
m = leaflet() %>% addTiles()
m
? addTiles
library(leaflet)#
m = leaflet() %>% addTiles()
m
m %>% setView(lng = -1.5, lat = 53.4, zoom = 10)
?leaflet
?leafletOutput
(m2 <- m %>%#
  setView(-1.5, 53.4, 10) %>% # map location#
  addMarkers(-1.4, 53.5) %>% # add a marker#
  addPopups(-1.6, 53.3, popup = "Hello Sheffield!") %>% # popup#
  # add som circles:#
  addCircles(color = "black", runif(90, -2, -1), runif(90, 53, 54), runif(90, 10, 500)))
? renderLeaflet
?leafletMap
?leafletOutput
?publish
publish
save
?save
m2
save(m2)
save(m2, "test")
save(m2, file = "test")
getwd()
? html_print
? toHTML
library(streamgraph)#
library(dplyr)#
ggplot2::movies %>%#
  select(year, Action, Animation, Comedy, Drama, Documentary, Romance, Short) %>%#
  tidyr::gather(genre, value, -year) %>%#
  group_by(year, genre) %>%#
  tally(wt=value) %>%#
  streamgraph("genre", "n", "year") %>%#
  sg_axis_x(20) %>%#
  sg_colors("PuOr") %>%#
  sg_legend(show=TRUE, label="Genres: ")
saveWidget
library(rgdal)#
library(leaflet)#
#
tmp <- tempdir()#
#
url <- "http://personal.tcu.edu/kylewalker/data/mexico.zip"#
#
file <- basename(url)#
#
download.file(url, file)#
#
unzip(file, exdir = tmp)#
#
mexico <- readOGR(dsn = tmp, layer = "mexico", encoding = "UTF-8")
library("swiTheme")#
library("swiRcharts")#
library("dplyr")#
library("rjson")#
#
#############################################################################################
###		SETTINGS	#
#############################################################################################
#
votefile <- "data/VOTEScsv_cleaned.csv"#
#
#############################################################################################
###		load initiative data	#
#############################################################################################
#
initiatives.read <- read.csv(votefile, check.names = F, stringsAsFactors = F, encoding = "latin1")#
#
# reverse order #
initiatives.read <- initiatives.read[rev(as.numeric(rownames(initiatives.read))),]#
#
# filter columns#
initiatives <- initiatives.read %>% select(`Date of Votes`, `Title in English`, `Title in German`, `Title in French`, `Title in Italien`, `Yes [%]`, `Theme codes`)#
# transform date to date#
initiatives$date <- as.Date(initiatives$`Date of Votes`)#
#
initiatives$year <- as.numeric(substr(initiatives$`Date of Votes`,1, 4))#
# add counter iniitiative per year #
initiatives <- do.call(rbind, by(initiatives, initiatives$year, function(ii) {#
	cbind(ii, n = nrow(ii):1)#
}))#
#############################################################################################
###		Plot#
#############################################################################################
#
## PLOT SETTINGS#
plot.height <- 350#
#
data <- initiatives %>% select (`Title in English`, `year`, `n`,  `Yes [%]`)#
colnames(data) <- c('name', 'y', 'x', 'value')#
#
a <- Highcharts$new()#
#
# use type='heatmap' for heat maps#
a$chart(zoomType = "x", type = 'heatmap', height = plot.height, plotBackgroundColor = "#f7f5ed", inverted = TRUE)#
a$series( data = rCharts::toJSONArray2(data, json = F, names = T))#
#
a$addParams(colorAxis =#
  list(min = 0, max = 100, stops = list(#
	  list(0, '#ab3d3f'),#
      list(0.499, '#EED8D9'),	  #
      list(0.5, '#999966'),#
      list(1, '#336666') #
  ))#
)#
#
# a$legend(align='right',#
#          layout='vertical',#
#          margin=0,#
#          verticalAlign='top',#
#          y=25,#
#          symbolHeight=plot.height)#
a$yAxis(max = max(data$y), ceiling = max(data$y), maxPadding = 0, tickAmount = 2, gridLineWidth =  0, minorGridLineWidth = 0, title = list(text = ""))#
#
a$xAxis(lineWidth = 0, minorGridLineWidth = 0, lineColor = 'transparent', labels = list(enabled = FALSE), #
	minorTickLength = 0, tickLength =  0)  	#
a$tooltip(formatter = "#! function() { return 'In <b>' + this.point.y + ',</b> the initative:<br><i>' + this.point.name +#
                    '</i><br>recolted <b>' + this.point.value + '%</b> of yes'; } !#")	 #
a$legend(enabled = F)#
a$addAssets(js =#
   c(#"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js",#
     # "https://code.highcharts.com/highcharts.js",#
     # "https://code.highcharts.com/highcharts-more.js",#
     "https://code.highcharts.com/modules/exporting.js",#
     "https://code.highcharts.com/modules/heatmap.js"#
     )#
)#
a#
#
a$save(destfile = 'initiative.html')#
#
hChart2responsiveHTML("initiative.html", output.html = "initiative_heatmap.html", h2 = "Toutes les initiatives populaires suisses", descr = "",#
	source = "", h3 = "", author = "Duc-Quang Nguyen | swissinfo.ch")
library(swiRchart)
library(swiRcharts)
?hSeries
ibrary(swiTheme)#
a <- rCharts::Highcharts$new()#
x <- 1:10#
y <- seq(1, 100, 10)#
z <- 10:1#
color <- rep(c("grey", "red"), 5)#
name <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")#
series <- c(rep(c("blob", "poop", "doop"), 3), "asdf")#
a$series(hSeries(x,y,z,name, color, series))#
#
# tweak the bubble plot#
a$chart(zoomType = "xy", type = "bubble")#
a$plotOptions(bubble = list(dataLabels = list(enabled = T, style = list(textShadow = 'none') ,#
color = '#aa8959', formatter = "#! function() { return this.point.name; } !#")))#
#
a$colors(swi_rpal)#
a$tooltip(formatter = "#! function() { return this.point.name + ':' +this.x + ', ' + this.y; } !#")#
a$xAxis(title = list(text = "important indicator", align = "high"), lineColor = list ('#FF0000'))#
a#
#
hChart.html <- tempfile("hchart_labelledBubble.html")#
a$save(hChart.html)
library(swiRchart)
library(swiRcharts)
?hSeries
library(swiTheme)#
a <- rCharts::Highcharts$new()#
x <- 1:10#
y <- seq(1, 100, 10)#
z <- 10:1#
color <- rep(c("grey", "red"), 5)#
name <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")#
series <- c(rep(c("blob", "poop", "doop"), 3), "asdf")#
a$series(hSeries(x,y,z,name, color, series))
a$chart(zoomType = "xy", type = "bubble")#
a$plotOptions(bubble = list(dataLabels = list(enabled = T, style = list(textShadow = 'none') ,#
color = '#aa8959', formatter = "#! function() { return this.point.name; } !#")))#
#
a$colors(swi_rpal)#
a$tooltip(formatter = "#! function() { return this.point.name + ':' +this.x + ', ' + this.y; } !#")#
a$xAxis(title = list(text = "important indicator", align = "high"), lineColor = list ('#FF0000'))#
a#
#
hChart.html <- tempfile("hchart_labelledBubble.html")#
a$save(hChart.html)
hChart2responsiveHTML
library(swiRcharts)
?hSeries
library(swiTheme)#
a <- rCharts::Highcharts$new()#
x <- 1:10#
y <- seq(1, 100, 10)#
z <- 10:1#
color <- rep(c("grey", "red"), 5)#
name <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")#
series <- c(rep(c("blob", "poop", "doop"), 3), "asdf")#
a$series(hSeries(x,y,z,name, color, series))
hSeries2 <- hSeries2(data.frame(x = x, y = y, z = z, color = color, name = name, series = series), "series")#
 b <- rCharts::Highcharts$new()#
b$series(hSeries2)
b
install.packages("readr")
install.package("devtools")
install.packages("devtools")
install.packages("rCharts")
install.packages("devtools")#
require(devtools)#
install_github('rCharts', 'ramnathv')#
library(rCharts)
install_github(ramnathv/rCharts)
1:2
rev(1:2)
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
#source("~/swissinfo/_helpers/helpers.R")#
library(swiTheme)#
library(slopegraph)#
#
#############################################################################################
###   load vote data#
#############################################################################################
# load results for the whole of Switzerland#
voteCH <- read.csv("~/swissinfo/_helpers/cantonal/vote/genetic/concat_genetic.csv", row.names = 1, check.names = F)#
colnames(voteCH) <- gsub("\\.", " ", colnames(voteCH))
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
#source("~/swissinfo/_helpers/helpers.R")#
library(swiTheme)#
library(slopegraph)#
#
#############################################################################################
###   load vote data#
#############################################################################################
# load results for the whole of Switzerland#
voteCH <- read.csv("~/swissinfo/_helpers/cantonal/vote/genetic/concat_genetic.csv", row.names = 1, check.names = F)#
colnames(voteCH) <- gsub("\\.", " ", colnames(voteCH))#
#############################################################################################
###   load an indicator#
#############################################################################################
# indicator data#
ifiles <- c("~/swissinfo/_helpers/cantonal/cantonalIndicators.csv")#
indicators <- do.call(cbind, lapply(ifiles, function (csv) {#
	ind <- read.csv(csv, row.names = 1, check.names = F)#
	# ensure rownames (cantons) are ordered correctly#
	stopifnot(identical(match(canton_names[,1], rownames(ind)) , 1:26))#
	ind#
}))
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
#source("~/swissinfo/_helpers/helpers.R")#
library(swiTheme)#
library(swiMap)#
library(slopegraph)
rownames(ind)
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
#source("~/swissinfo/_helpers/helpers.R")#
library(swiTheme)#
library(swiMap)#
library(slopegraph)#
#
#############################################################################################
###   load vote data#
#############################################################################################
# load results for the whole of Switzerland#
voteCH <- read.csv("~/swissinfo/_helpers/cantonal/vote/genetic/concat_genetic.csv", row.names = 1, check.names = F)#
colnames(voteCH) <- gsub("\\.", " ", colnames(voteCH))#
#############################################################################################
###   load an indicator#
#############################################################################################
# indicator data#
ifiles <- c("~/swissinfo/_helpers/cantonal/cantonalIndicators.csv")#
indicators <- do.call(cbind, lapply(ifiles, function (csv) {#
	ind <- read.csv(csv, row.names = 1, check.names = F)#
	# ensure rownames (cantons) are ordered correctly#
	stopifnot(identical(match(canton_CH[,1], rownames(ind)) , 1:26))#
	ind#
}))
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
#source("~/swissinfo/_helpers/helpers.R")#
library(swiTheme)#
library(swiMap)#
library(slopegraph)#
#
#############################################################################################
###   load vote data#
#############################################################################################
# load results for the whole of Switzerland#
voteCH <- read.csv("~/swissinfo/_helpers/cantonal/vote/genetic/concat_genetic.csv", row.names = 1, check.names = F)#
colnames(voteCH) <- gsub("\\.", " ", colnames(voteCH))
voteCH
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
read.csv("data/reproductive_medicine.csv", row.names = 1, check.names = F)
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
voteCH
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
vote2
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
vote2 <- read.csv("data/reproductive_medicine.csv", row.names = 1, check.names = F)[,1]
vote2
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
read.csv("data/reproductive_medicine.csv", row.names = 1, check.names = F)[,-2]
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
row.names = 1
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
vote2 <- read.csv("data/reproductive_medicine.csv", check.names = F)
votes2
vote2
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
ead.csv("data/reproductive_medicine.csv", check.names = F)[,-3]
read.csv("data/reproductive_medicine.csv", check.names = F)[,-3]
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
vote2 <- read.csv("data/reproductive_medicine.csv", check.names = F)[,-3]
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
rownames(voteCH)
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
canton_namesStrict(rownames(voteCH), 'iso2')
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
stopifnot(identical(canton_namesStrict(rownames(voteCH), 'iso2'),vote2[,1] )
)
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
canton_namesStrict(rownames(voteCH), 'iso2')
canton_namesStrict(rownames(voteCH), 'iso2') == vote2[,1]
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
stopifnot(canton_namesStrict(rownames(voteCH), 'iso2') == vote2[,1] )
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
cbind(voteCH, vote2[,2])
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
vote2[,2]
vote2
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
vote2[,2]
select(vote2)
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
#source("~/swissinfo/_helpers/helpers.R")#
library(swiTheme)#
library(swiMap)#
library(slopegraph)#
#
#############################################################################################
###   load vote data#
#############################################################################################
#
# load results for the whole of Switzerland#
voteCH <- read.csv("~/swissinfo/_helpers/cantonal/vote/genetic/concat_genetic.csv", row.names = 1, check.names = F)#
colnames(voteCH) <- gsub("\\.", " ", colnames(voteCH))#
#
# load the latest genetic vote results#
#
vote2 <- read.csv("data/reproductive_medicine.csv", check.names = F)[,-3]#
stopifnot(canton_namesStrict(rownames(voteCH), 'iso2') == vote2[,1] )#
#
voteCH <- cbind(voteCH, dpi = vote2[,2])
voteCH
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
# indicator data#
ifiles <- c("~/swissinfo/_helpers/cantonal/cantonalIndicators.csv")#
indicators <- do.call(cbind, lapply(ifiles, function (csv) {#
	ind <- read.csv(csv, row.names = 1, check.names = F)#
	# ensure rownames (cantons) are ordered correctly#
	stopifnot(identical(match(canton_CH[,1], rownames(ind)) , 1:26))#
	ind#
}))#
# get only the population indicator#
pop <- indicators[,which(colnames(indicators) == 'Population.Habitants.en.milliers'), drop = FALSE]#
df <- voteCH
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
lineW <- pop[match(canton_namesStrict(rownames(df)), rownames(pop)),1]#
lineW <- c(lineW,  max(lineW) + mean(lineW))#
cols <- c(rep("black", nrow(voteCH)), swi_pal[9])#
#
pdfswi_long("genetic_slopegraph.pdf")#
par(family = font)#
slopegraph(df, rescaleByColumn = F, cex.lab = 0.5, cex.num = 0.6, lab.sep = 0.25,#
	offset.x = 0.08, offset.lab = 0.03, xlim = c(-1, ncol(voteCH) + 1.2),#
	collapse.label = ", ", lwd =  scale(lineW, center = F), col.lines = cols, mai = c(0, 0, 0.6, 0),#
	main = "")
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
#source("~/swissinfo/_helpers/helpers.R")#
library(swiTheme)#
library(swiMap)#
library(slopegraph)#
#
#############################################################################################
###   load vote data#
#############################################################################################
#
font <- "Open Sans"#
# load results for the whole of Switzerland#
voteCH <- read.csv("~/swissinfo/_helpers/cantonal/vote/genetic/concat_genetic.csv", row.names = 1, check.names = F)#
colnames(voteCH) <- gsub("\\.", " ", colnames(voteCH))#
#
# load the latest genetic vote results#
#
vote2 <- read.csv("data/reproductive_medicine.csv", check.names = F)[,-3]#
stopifnot(canton_namesStrict(rownames(voteCH), 'iso2') == vote2[,1] )#
#
voteCH <- cbind(voteCH, dpi = vote2[,2])#
#############################################################################################
###   load an indicator#
#############################################################################################
# indicator data#
ifiles <- c("~/swissinfo/_helpers/cantonal/cantonalIndicators.csv")#
indicators <- do.call(cbind, lapply(ifiles, function (csv) {#
	ind <- read.csv(csv, row.names = 1, check.names = F)#
	# ensure rownames (cantons) are ordered correctly#
	stopifnot(identical(match(canton_CH[,1], rownames(ind)) , 1:26))#
	ind#
}))#
# get only the population indicator#
pop <- indicators[,which(colnames(indicators) == 'Population.Habitants.en.milliers'), drop = FALSE]#
df <- voteCH#
lineW <- pop[match(canton_namesStrict(rownames(df)), rownames(pop)),1]#
lineW <- c(lineW,  max(lineW) + mean(lineW))#
cols <- c(rep("black", nrow(voteCH)), swi_pal[9])#
#
pdfswi_long("genetic_slopegraph.pdf")#
par(family = font)#
slopegraph(df, rescaleByColumn = F, cex.lab = 0.5, cex.num = 0.6, lab.sep = 0.25,#
	offset.x = 0.08, offset.lab = 0.03, xlim = c(-1, ncol(voteCH) + 1.2),#
	collapse.label = ", ", lwd =  scale(lineW, center = F), col.lines = cols, mai = c(0, 0, 0.6, 0),#
	main = "")#
# par(family = font)#
# slopegraph(df, rescaleByColumn = F, cex.lab = 0.5, cex.num = 0.6, lab.sep = 0.25,#
# 	offset.x = 0.045, offset.lab = 0.03, xlim = c(-1.2, ncol(votes) + 1.2),#
# 	collapse.label = ", ", lwd =  scale(lineW, center = F) / 2, col.lines = cols, mai = c(0.01, 0, 0.9, 0))#
##
##
# par(family = font)#
# slopegraph(df[,2:4], rescaleByColumn = F, cex.lab = 0.5, cex.num = 0.6, lab.sep = 0.25,#
# 	offset.x = 0.07, offset.lab = 0.03, xlim = c(-0.6, ncol(votes) + 0.8),#
# 	collapse.label = ", ", lwd =  scale(lineW, center = F) / 2, col.lines = cols, mai = c(0.01, 0, 0.9, 0))#
dev.off()
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
pdfswi_long("genetic_slopegraph.pdf")#
par(family = font)#
slopegraph(df, rescaleByColumn = F, cex.lab = 0.5, cex.num = 0.6, lab.sep = 0.25,#
	offset.x = 0.08, offset.lab = 0.03, xlim = c(-1, ncol(voteCH) + 1.2),#
	collapse.label = ", ", lwd =  scale(lineW, center = F), col.lines = cols, mai = c(0, 0, 0.6, 0),#
	main = "")#
par(family = font)#
slopegraph(df, rescaleByColumn = F, cex.lab = 0.5, cex.num = 0.6, lab.sep = 0.25,#
	offset.x = 0.045, offset.lab = 0.03, xlim = c(-1.2, ncol(votes) + 1.2),#
	collapse.label = ", ", lwd =  scale(lineW, center = F) / 2, col.lines = cols, mai = c(0.01, 0, 0.9, 0))#
par(family = font)#
slopegraph(df[,2:4], rescaleByColumn = F, cex.lab = 0.5, cex.num = 0.6, lab.sep = 0.25,#
	offset.x = 0.07, offset.lab = 0.03, xlim = c(-0.6, ncol(votes) + 0.8),#
	collapse.label = ", ", lwd =  scale(lineW, center = F) / 2, col.lines = cols, mai = c(0.01, 0, 0.9, 0))#
dev.off()
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
voteCH
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
#source("~/swissinfo/_helpers/helpers.R")#
library(swiTheme)#
library(swiMap)#
library(slopegraph)#
#
#############################################################################################
###   load vote data#
#############################################################################################
#
font <- "Open Sans"#
# load results for the whole of Switzerland#
voteCH <- read.csv("~/swissinfo/_helpers/cantonal/vote/genetic/concat_genetic.csv", row.names = 1, check.names = F)#
colnames(voteCH) <- gsub("\\.", " ", colnames(voteCH))#
#
# load the latest genetic vote results#
#
vote2 <- read.csv("data/reproductive_medicine.csv", check.names = F)[,-3]#
stopifnot(canton_namesStrict(rownames(voteCH), 'iso2') == vote2[,1] )#
#
voteCH <- cbind(voteCH, dpi = round(vote2[,2], 1))#
#############################################################################################
###   load an indicator#
#############################################################################################
# indicator data#
ifiles <- c("~/swissinfo/_helpers/cantonal/cantonalIndicators.csv")#
indicators <- do.call(cbind, lapply(ifiles, function (csv) {#
	ind <- read.csv(csv, row.names = 1, check.names = F)#
	# ensure rownames (cantons) are ordered correctly#
	stopifnot(identical(match(canton_CH[,1], rownames(ind)) , 1:26))#
	ind#
}))#
# get only the population indicator#
pop <- indicators[,which(colnames(indicators) == 'Population.Habitants.en.milliers'), drop = FALSE]#
df <- voteCH#
lineW <- pop[match(canton_namesStrict(rownames(df)), rownames(pop)),1]#
lineW <- c(lineW,  max(lineW) + mean(lineW))#
cols <- c(rep("black", nrow(voteCH)), swi_pal[9])#
#
pdfswi_long("genetic_slopegraph.pdf")#
par(family = font)#
slopegraph(df, rescaleByColumn = F, cex.lab = 0.5, cex.num = 0.6, lab.sep = 0.25,#
	offset.x = 0.08, offset.lab = 0.03, xlim = c(-1, ncol(voteCH) + 1.2),#
	collapse.label = ", ", lwd =  scale(lineW, center = F), col.lines = cols, mai = c(0, 0, 0.6, 0),#
	main = "")
dev.off()
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
pop
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
#source("~/swissinfo/_helpers/helpers.R")#
library(swiTheme)#
library(swiMap)#
library(slopegraph)#
#
#############################################################################################
###   load vote data#
#############################################################################################
#
font <- "Open Sans"#
# load results for the whole of Switzerland#
voteCH <- read.csv("~/swissinfo/_helpers/cantonal/vote/genetic/concat_genetic.csv", row.names = 1, check.names = F)#
colnames(voteCH) <- gsub("\\.", " ", colnames(voteCH))#
#
# load the latest genetic vote results#
#
vote2 <- read.csv("data/reproductive_medicine.csv", check.names = F)[,-3]#
stopifnot(canton_namesStrict(rownames(voteCH), 'iso2') == vote2[,1] )#
#
voteCH <- cbind(voteCH, dpi = round(vote2[,2], 1))#
#############################################################################################
###   load an indicator#
#############################################################################################
# indicator data#
ifiles <- c("~/swissinfo/_helpers/cantonal/cantonalIndicators.csv")#
indicators <- do.call(cbind, lapply(ifiles, function (csv) {#
	ind <- read.csv(csv, row.names = 1)#
	# ensure rownames (cantons) are ordered correctly#
	stopifnot(identical(match(canton_CH[,1], rownames(ind)) , 1:26))#
	ind#
}))#
# get only the population indicator#
pop <- indicators[,which(colnames(indicators) == 'Population.Habitants.en.milliers'), drop = FALSE]
pop
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
#source("~/swissinfo/_helpers/helpers.R")#
library(swiTheme)#
library(swiMap)#
library(slopegraph)#
#
#############################################################################################
###   load vote data#
#############################################################################################
#
font <- "Open Sans"#
# load results for the whole of Switzerland#
voteCH <- read.csv("~/swissinfo/_helpers/cantonal/vote/genetic/concat_genetic.csv", row.names = 1, check.names = F)#
colnames(voteCH) <- gsub("\\.", " ", colnames(voteCH))#
#
# load the latest genetic vote results#
#
vote2 <- read.csv("data/reproductive_medicine.csv", check.names = F)[,-3]#
stopifnot(canton_namesStrict(rownames(voteCH), 'iso2') == vote2[,1] )#
#
voteCH <- cbind(voteCH, dpi = round(vote2[,2], 1))#
#############################################################################################
###   load an indicator#
#############################################################################################
# indicator data#
ifiles <- c("~/swissinfo/_helpers/cantonal/cantonalIndicators.csv")#
indicators <- do.call(cbind, lapply(ifiles, function (csv) {#
	ind <- read.csv(csv, row.names = 1)#
	# ensure rownames (cantons) are ordered correctly#
	stopifnot(identical(match(canton_CH[,1], rownames(ind)) , 1:26))#
	ind#
}))#
# get only the population indicator#
pop <- indicators[,which(colnames(indicators) == 'Population.Habitants.en.milliers'), drop = FALSE]#
df <- voteCH#
lineW <- pop[match(canton_namesStrict(rownames(df)), rownames(pop)),1]#
lineW <- c(lineW,  max(lineW) + mean(lineW))#
cols <- c(rep("black", nrow(voteCH)), swi_pal[9])#
#
pdfswi_long("genetic_slopegraph.pdf")#
par(family = font)#
slopegraph(df, rescaleByColumn = F, cex.lab = 0.5, cex.num = 0.6, lab.sep = 0.25,#
	offset.x = 0.08, offset.lab = 0.03, xlim = c(-1, ncol(voteCH) + 1.2),#
	collapse.label = ", ", lwd =  scale(lineW, center = F), col.lines = cols, mai = c(0, 0, 0.6, 0),#
	main = "")#
dev.off()
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
voteCH
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
voteCH[,2]
setwd('/Users/nguyendu/Google Drive/swissinfo/2015_06_14_votePatterns')
#source("~/swissinfo/_helpers/helpers.R")#
library(swiTheme)#
library(swiMap)#
library(slopegraph)#
#
#############################################################################################
###   load vote data#
#############################################################################################
#
font <- "Open Sans"#
# load results for the whole of Switzerland#
voteCH <- read.csv("~/swissinfo/_helpers/cantonal/vote/genetic/concat_genetic.csv", row.names = 1, check.names = F)#
colnames(voteCH) <- gsub("\\.", " ", colnames(voteCH))#
#
# load the latest genetic vote results#
#
vote2 <- read.csv("data/reproductive_medicine.csv", check.names = F)[,-3]#
stopifnot(canton_namesStrict(rownames(voteCH), 'iso2') == vote2[,1] )#
#
voteCH <- cbind(voteCH, dpi = round(vote2[,2], 1))#
#
# TRANSFORM 2nd vote into % of no#
voteCH[,2] <- 100 - voteCH[,2]#
#############################################################################################
###   load an indicator#
#############################################################################################
# indicator data#
ifiles <- c("~/swissinfo/_helpers/cantonal/cantonalIndicators.csv")#
indicators <- do.call(cbind, lapply(ifiles, function (csv) {#
	ind <- read.csv(csv, row.names = 1)#
	# ensure rownames (cantons) are ordered correctly#
	stopifnot(identical(match(canton_CH[,1], rownames(ind)) , 1:26))#
	ind#
}))#
# get only the population indicator#
pop <- indicators[,which(colnames(indicators) == 'Population.Habitants.en.milliers'), drop = FALSE]#
df <- voteCH#
lineW <- pop[match(canton_namesStrict(rownames(df)), rownames(pop)),1]#
lineW <- c(lineW,  max(lineW) + mean(lineW))#
cols <- c(rep("black", nrow(voteCH)), swi_pal[9])#
#
pdfswi_long("genetic_slopegraph.pdf")#
par(family = font)#
slopegraph(df, rescaleByColumn = F, cex.lab = 0.5, cex.num = 0.6, lab.sep = 0.25,#
	offset.x = 0.08, offset.lab = 0.03, xlim = c(-1, ncol(voteCH) + 1.2),#
	collapse.label = ", ", lwd =  scale(lineW, center = F), col.lines = cols, mai = c(0, 0, 0.6, 0),#
	main = "")#
dev.off()
